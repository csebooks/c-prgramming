---
title: 'Recursion'
weight: 9
---

<div class="slides">

  <!-- Slide 1: Introduction to Recursion -->
  <section data-auto-animate data-transition="zoom">
    <h2>Recursion in C</h2>
    <p>Provide an introduction to recursion and its significance in programming.</p>
    <p>Mention that recursion is a process of defining something in terms of itself.</p>
</section>

<!-- Slide 2: Simple Example of Recursion -->
<section data-auto-animate data-transition="zoom">
    <h2>Simple Example of Recursion</h2>
    <p>Use the factorial calculation as an example to introduce recursion.</p>
    <p>Explain how the factorial can be expressed in a recursive form.</p>
</section>

<!-- Slide 3: Non-Recursive Factorial Calculation -->
<section data-auto-animate data-transition="zoom">
    <h2>Non-Recursive Factorial Calculation</h2>
    <p>Present a non-recursive code example for calculating the factorial.</p>
    <p>Explain how this method works with a code snippet.</p>
</section>

<!-- Slide 4: Recursive Factorial Calculation -->
<section data-auto-animate data-transition="zoom">
    <h2>Recursive Factorial Calculation</h2>
    <p>Show a recursive code example for calculating the factorial.</p>
    <p>Describe how the recursive function works with an example.</p>
    <p>Include code snippets for both the main function and the recursive function.</p>
</section>

<!-- Slide 5: How Recursion Works -->
<section data-auto-animate data-transition="zoom">
    <h2>How Recursion Works</h2>
    <p>Explain the flow of control during recursive function calls.</p>
    <p>Clarify the concept of multiple invocations of the same function.</p>
    <p>Use a simplified diagram to illustrate the flow of control.</p>
</section>

<!-- Slide 6: Recursion and the Stack -->
<section data-auto-animate data-transition="zoom">
    <h2>Recursion and the Stack</h2>
    <p>Introduce the concept of the stack and its role in implementing function calls.</p>
    <p>Explain the Last In First Out (LIFO) property of the stack.</p>
    <p>Discuss how the stack manages data during function calls.</p>
</section>

<!-- Slide 7: The Stack in Recursion -->
<section data-auto-animate data-transition="zoom">
    <h2>The Stack in Recursion</h2>
    <p>Show how the stack is used during both normal and recursive function calls.</p>
    <p>Use a diagram to demonstrate the contents of the stack during execution.</p>
    <p>Explain how parameters and return addresses are managed on the stack.</p>
</section>

<!-- Slide 8: Handling Indefinite Recursion -->
<section data-auto-animate data-transition="zoom">
    <h2>Handling Indefinite Recursion</h2>
    <p>Emphasize the importance of including an "if" statement to prevent infinite recursion.</p>
    <p>Describe the consequences of not preventing infinite recursion.</p>
    <p>Provide advice on using printf() for debugging.</p>
</section>

<!-- Slide 9: Summary of Key Points -->
<section data-auto-animate data-transition="zoom">
    <h2>Summary of Key Points</h2>
    <p>Summarize the main takeaways from the discussion on recursion.</p>
    <p>Emphasize the significance of understanding and correctly implementing recursion.</p>
</section>

<!-- Slide 10: Performance Considerations -->
<section data-auto-animate data-transition="zoom">
    <h2>Performance Considerations</h2>
    <p>Mention the potential performance impact of frequent function calls, especially in recursive scenarios.</p>
    <p>Discuss the trade-offs between recursion and iterative solutions.</p>
</section>

</div>