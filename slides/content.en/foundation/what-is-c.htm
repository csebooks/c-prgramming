---
title: 'What is C ?'
weight: 1
---


<div class="slides">
    <section data-auto-animate data-transition="zoom">
        <h2  class="r-fit-text" style="white-space: nowrap; display: inline-block; font-size: 218.789px;">What is C?</h2>
    </section>

    <section data-auto-animate data-transition="zoom">
        <h2>Introduction</h2>
        <p>C is a general-purpose programming language originally developed at Bell Labs in the 1970s. It was designed by Dennis Ritchie for system programming, but it's widely used in various application domains.</p>
    </section>

    <section data-auto-animate data-transition="zoom">
      <section>
        <h2>Key Features</h2>
        <ul>
            <li>Procedural Language: C is a procedural programming language, which means it follows a top-down approach in program design.</li>
            <li>Low-Level: C provides a high degree of control over hardware, making it suitable for system programming and embedded systems.</li>
            <li>Portability: Code written in C can be compiled for different platforms with minimal changes, thanks to its portability.</li>
        </ul>
      </section>
      <section>
      <ul>
        <li>Efficiency: C is known for its efficiency and is often used for performance-critical applications.</li>
        <li>Syntax: C has a simple and elegant syntax. It uses a combination of keywords and punctuation, making it highly readable and expressive.</li>
        <li>Standard Libraries: C comes with a standard library that provides functions and macros for performing various tasks, from I/O operations to mathematical calculations.</li>
      </ul>
      </section> 
    </section>

    <section data-auto-animate data-transition="zoom">
        <h2>Applications</h2>
        <ul>
            <li>Operating Systems: Many operating systems are written in C or have components written in C (e.g., Unix, Linux).</li>
            <li>Embedded Systems: C is prevalent in embedded systems like microcontrollers and IoT devices.</li>
            <li>Game Development: It's used for game development, especially in writing game engines.</li>
            <li>Compiler Development: C is often used to develop compilers and interpreters for other languages.</li>
        </ul>
    </section>
    <section data-auto-animate data-transition="zoom">
      <h2>Example: Hello World program in C</h2>
      <pre><code class="language-c">
#include <stdio.h>

int main() {
printf("Hello, World!\n");
return 0;
}
      </code></pre>
  </section>

    <section data-auto-animate data-transition="zoom">
        <h2>Popularity</h2>
        <p>C has a strong legacy and is still widely used in industry and education due to its powerful features and low-level capabilities.</p>
    </section>

    <section data-auto-animate data-transition="zoom">
        <h1>Getting Started with C</h1>
    </section>

    <section data-auto-animate data-transition="zoom">
        <h2>The C Character Set</h2>
        <p>C Character Set: C uses a character set that consists of letters, digits, and various special characters. It's essential to understand this character set when writing C code.</p>
        <h3>Character Set Components:</h3>
        <ul>
            <li>Letters: Uppercase and lowercase letters are distinct in C.</li>
            <li>Digits: C uses decimal digits (0-9).</li>
            <li>Special Characters: Special characters like +, -, *, /, %, &, |, !, etc., are used for operations.</li>
        </ul>
    </section>

    <section data-auto-animate data-transition="zoom">
        <h2>Constants, Variables, and Keywords</h2>
        <h3>Constants:</h3>
        <p>Constants in C are values that do not change during program execution. They can be of different types, including integer constants (e.g., 42), floating-point constants (e.g., 3.14), and character constants (e.g., 'A').</p>
        <h3>Variables:</h3>
        <p>Variables are used to store data that can change during program execution. You must declare variables with a data type before using them.</p>
        <h3>Data Types:</h3>
        <p>C supports various data types, including:</p>
        <ul>
            <li>int: For integers.</li>
            <li>float: For floating-point numbers.</li>
            <li>char: For characters.</li>
            <li>double: For double-precision floating-point numbers.</li>
        </ul>
        <h3>Keywords:</h3>
        <p>Keywords are reserved words in C and cannot be used as identifiers (variable or function names). Examples include "int," "if," "while," "return," and "break."</p>
    </section>

    <section data-auto-animate data-transition="zoom">
        <h2>Example:</h2>
        <pre><code class="language-c">
#include <stdio.h>

int main() {
    int age;  // Declaration of an integer variable
    age = 30; // Assignment of a value to the variable
     printf("My age is %d years.\n", age);
  return 0;
}
        </code></pre>
        <p>Note: C is case-sensitive, so "Age" and "age" would be treated as different variables.</p>
    </section>
  </div>


